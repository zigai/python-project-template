[project]
name = "{{ package_name }}"
version = "0.1.0"
description = "{{ description }}"
authors = [{ name = "{{ author_name }}", email = "{{ author_email }}" }]
{%- if copyright_license != "None" %}
license = { file = "LICENSE" }
{%- endif %}
readme = "README.md"
requires-python = ">={{ python_min_version }}"
dependencies = []

{%- set LICENSE_TROVE_MAP = {
    "MIT": "License :: OSI Approved :: MIT License",
    "Apache-2.0": "License :: OSI Approved :: Apache Software License",
    "GPL-3.0": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "GPL-2.0": "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
    "AGPL-3.0": "License :: OSI Approved :: GNU Affero General Public License v3",
    "LGPL-3.0": "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "LGPL-2.1": "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
    "BSD-2-Clause": "License :: OSI Approved :: BSD License",
    "BSD-3-Clause": "License :: OSI Approved :: BSD License",
    "BSD-3-Clause-Clear": "License :: OSI Approved :: BSD License",
    "BSL-1.0": "License :: OSI Approved :: Boost Software License 1.0 (BSL-1.0)",
    "PostgreSQL": "License :: OSI Approved :: PostgreSQL License",
    "MPL-2.0": "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "EPL-1.0": "License :: OSI Approved :: Eclipse Public License 1.0 (EPL-1.0)",
    "EPL-2.0": "License :: OSI Approved :: Eclipse Public License 2.0 (EPL-2.0)",
    "Artistic-2.0": "License :: OSI Approved :: Artistic License",
    "AFL-3.0": "License :: OSI Approved :: Academic Free License (AFL)",
    "ISC": "License :: OSI Approved :: ISC License (ISCL)",
    "MS-PL": "License :: OSI Approved :: Microsoft Public License (Ms-PL)",
    "MS-RL": "License :: OSI Approved :: Microsoft Reciprocal License (Ms-RL)",
    "NCSA": "License :: OSI Approved :: University of Illinois/NCSA Open Source License",
    "OFL-1.1": "License :: OSI Approved :: SIL Open Font License 1.1 (OFL-1.1)",
    "CC0-1.0": "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
    "CC-BY-4.0": "License :: Creative Commons Attribution 4.0 International",
    "CC-BY-SA-4.0": "License :: Creative Commons Attribution Share Alike 4.0 International",
    "WTFPL": "License :: OSI Approved :: Do What The F*ck You Want To Public License (WTFPL)"
} -%}
{%- set license_classifier = LICENSE_TROVE_MAP.get(copyright_license) %}

classifiers = [
{%- if license_classifier %}
    "{{ license_classifier }}",
{%- endif %}
    "Typing :: Typed",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
{%- for classifier in py_classifiers(python_min_version, python_max_version) %}
    "{{ classifier }}",
{%- endfor %}
]

keywords = [
    "{{ package_name }}"
]


[project.optional-dependencies]
test = ["pytest"]
dev = ["pytest", "black", "ruff", "pre-commit"]

[project.urls]
Repository = "{{ repository_url }}"
Issues = "{{ repository_url }}/issues"
Homepage = "{{ repository_url }}"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["{{ package_name }}"]

[tool.black]
line-length = 100
target-version = [
{%- for target in black_target_versions(python_min_version, python_max_version) %}
    '{{ target }}',
{%- endfor %}
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
    "F",       # Pyflakes
    "E",       # Pycodestyle (Error)
    'I',       # isort
    'D',       # pydocstyle
    'UP',      # pyupgrade
    'YTT',     # flake8-2020
    'B',       # flake8-bugbear
    "PLE",     # pylint
    'PYI006',
    'PYI019',
    'PYI024',
    'PYI030',
    'PYI062',
    'PYI063',
    'PYI066',
    "RUF001",
    "RUF002",
    "RUF003",
    "RUF005",
    "RUF006",
    "RUF012",
    "RUF013",
    "RUF016",
    "RUF017",
    "RUF018",
    "RUF019",
    "RUF020",
    "RUF021",
    "RUF024",
    "RUF026",
    "RUF030",
    "RUF032",
    "RUF033",
    "RUF034",
    "TRY002",
    "TRY004",
    "TRY201",
    "TRY300",
    "TRY301",
    "TRY400",
    "PERF101",
    "RET503",
    "LOG001",
    "LOG002",
]
ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    'D105',
    'D106',
    'D107',
    'D205',
    "D212",
    'D415',
    'E501',
    'B011',
    'B028',
    'B904',
    'PIE804',
    "N802",
    "N803",
    "N806",
    "UP007",
    "UP038",
]
isort = { known-first-party = ["{{ package_name }}", 'tests'] }
pydocstyle = { convention = 'google' }

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests/*",
    "tests/**/*",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Unused import
    "E402", # Module import not at top of file
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.hatch.envs.test]
features = ["test"]
installer = "uv"

[[tool.hatch.envs.test.matrix]]
python = [
{%- for version in py_versions_range(python_min_version, python_max_version) %}
    "{{ version }}",
{%- endfor %}
]

[tool.hatch.envs.test.scripts]
test = "pytest -v"
